DXR Permalink Generator
==========================

*This document details how to use the permalink functionality
found in the Nav menu in DXR's file view*

The permalink feature is visible in the file view when the Omniglot plugin
has been activated during indexing. The permalink will point to the current
revision of a file in Git/Mercurial and allows users to share URLs pointing
to a file at a particular point in time in the VCS. 

The permalinked version of a file is *not* indexed, but all contextual menus
and highlighting functionality will still work. Contextual menus will redirect
the user to HEAD/TIP live indexed code until ElasticSearch is integrated for 
on demand indexing.

Required settings and components
--------------------------------

Two major components are required for the permalink feature to work:

dxr.config.in Tree options
##########################

The following two fields must be added to dxr.config.in in the respective
code tree section:

  * ``vcs_folder = PWD/target``

  * ``vcs_type = "git"`` or ``vcs_type = "hg"``

An example section would look like this::

    [dxr]
    source_folder       = PWD/code
    object_folder       = PWD/code
    build_command       = make clean; make -j $jobs
    vcs_folder          = PWD/target
    vcs_type            = git

The [dxr] name *must* match the upstream repository name. For example, for
[dxr] to work, the underlying Git repository remote would be:
``git@github.com:mozilla/dxr.git``, which results in *dxr* as the repository
name. The same applies to Mercurial.

It is easiest to extract the desired name from Git or Mercurial and name the
tree accordingly in dxr.config.in to guarantee a consistent mapping.

Git or Mecurial directory
#########################

Permalink fuctionality is enabled by taking a copy of the underlying VCS
repository and putting it in a readable location for production use. While
inefficient, copying is used instead of moving a VCS directory. This method
is required because during development a command like ``make clean`` could
result in deleting the only copy of the underlying VCS repository.

As such, for the Permalink feature to work, there must be a VCS repository
available in the top-level of the target code tree, which is the canonical
source for the code that is to be indexed.

Usage
-----

Presuming a successful build of an index with Omniglot plugin enabled, visit
any page and  note the Permalink item in the Navigation Menu top right of
the page.

Clicking the permalink will direct the user to a url like:

``http://33.33.33.77:8000/dxr/rev/45fbfcaf30e141b9770ac3539912c53d5e82616c/code/main.c``

This URL corresponds to the Flask route defined in *dxr.py*:

``@dxr_blueprint.route('/<repository>/rev/<revision>/<path:file>')``

The leading *dxr* component of the path is generated by the Omniglot function
``def synth_web_url(repo)``. 

The plugin detects the name of the upstream repository and absolutely *must*
match the name of the Tree given in dxr.config.in.