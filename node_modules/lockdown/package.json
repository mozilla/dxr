{
  "author": {
    "name": "Lloyd Hilaiel",
    "email": "lloyd@hilaiel.com",
    "url": "http://lloyd.io"
  },
  "contributors": [
    {
      "name": "Zachary Carter",
      "email": "zach@carter.name",
      "url": "http://twitter.com/zii"
    },
    {
      "name": "Sean McArthur",
      "email": "sean.monstar@gmail.com",
      "url": "http://seanmonstar.com"
    }
  ],
  "name": "lockdown",
  "description": "Lock your node.js app to specific versions (and checksums) of dependencies.",
  "version": "0.0.6",
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/npm-lockdown.git"
  },
  "engines": {
    "node": ">=0.6.17"
  },
  "dependencies": {
    "npmconf": "1.1.5",
    "osenv": "0.1.0",
    "read-installed": "3.1.0"
  },
  "bin": {
    "lockdown": "./lockdown.js",
    "lockdown-relock": "./relock.js"
  },
  "readme": "# npm-lockdown\n\nPut your dependencies on lockdown.\n\n![lockdown](https://github.com/mozilla/npm-lockdown/raw/master/npm-lockdown.png)\n\n## What's this?\n\nNPM Lockdown is a tool that locks your node.js app to\nspecific versions of dependencies... So that you can:\n\n  1. know that the code you develop against is what you test and deploy\n  2. `npm install` and get the same code, every time.\n  3. not have to copy all of your dependencies into your project\n  4. not have to stand up a private npm repository to solve this problem.\n\n## Who is this for?\n\nNode.JS application developers, but not library authors.  Stuff published\nin npm as libraries probably wouldn't be interested.\n\n## Why Care?\n\nEven if you express verbatim versions in your package.json file, you're still\nvulnerable to your code breaking at any time.  This can happen if a dependency\nof a project you depend on with a specific version *itself* depends on another\npackages with a version range.\n\nHow can other people accidentally or intentionally break your node.js app?\nWell, they might...\n\n  * ... push a new version that no longer supports your preferred version of node.js.\n  * ... fix a subtle bug that you actually depend on.\n  * ... accidentally introduce a subtle bug.\n  * ... be having a bad day.\n\nAnd, any author at any time can overwrite the package version they have published\nso one under-thought `npm publish -f` can mean a subtle bug that steals days\nof your week.\n\n## Usage!\n\n\n\n    npm install --save foo@0.8.1\n    ./node_modules/.bin/lockdown-relock\n\n`npm-lockdown` is easy to get started with.  It generates a single file that lists\nthe versions and check-sums of the software you depend on, so any time something\nchanges out from under you, `npm install` will fail and tell you what package has\nchanged.\n\n### One Time Project Setup\n\n  1. npm install the version of lockdown you want: `npm install --save lockdown`\n  2. add a line to your package.json file: `\"scripts\": { \"preinstall\": \"lockdown\" }`\n  3. generate a lockdown.json: `node_modules/.bin/lockdown-relock`\n  4. commit: `git add package.json lockdown.json && git commit -m \"be safe\"`\n\n### Adding new modules\n\n  1. npm install the specific dependencies of your app `npm install --save foo@0.8.1`\n  4. re-generate your lockdown.json: `node_modules/.bin/lockdown-relock`\n  5. commit: `git add package.json lockdown.json && git commit -m \"be safe\"`\n\n### Changing dependencies once locked down\n\nYou update your dependencies explicitly, relock, and commit:\n\n    npm install --save foo@1.2.3\n    node_modules/.bin/lockdown-relock\n    git add lockdown.json package.json\n    git commit -m \"move to foo v1.2.3\"\n\ndone!\n\n### Using an npm mirror\n\nYou can fetch resources from an npm mirror by specifying the NPM_CONFIG_REGISTRY\nenvironment variable when invoking `npm install`. If NPM_CONFIG_REGISTRY is not\nspecified, http://registry.npmjs.org will be used.\n\n    NPM_CONFIG_REGISTRY=http://registry.npmjs.eu/ npm install\n\n## Notes:\n\n  * You should use the latest stable version of lockdown, find it from the [npm registry](https://npmjs.org/package/lockdown)\n\n## Installing dependencies once locked down\n\n    npm install\n\n## Related Tools\n\n**[npm shrinkwrap][]** - NPM itself has a feature called \"shrinkwrap\" that\n\n> locks down the versions of a package's dependencies so that you can control exactly which\n> versions of each dependency will be used when your package is installed.\n\nAt present (as of npm v1.1.33), the implementation of shrinkwrap has a couple flaws\nwhich make it unusable for certain applications:\n\n  1. No checksums!  NPM shrinkwrap does not guarantee bit-wise equality of the installed\n     dependencies, so if an upstream server or author decides to change the contents of\n     version 1.2.3 of `foo`, you'll install something different than you intended without\n     knowing.\n  2. Does not play nice with `optionalDependencies` - If you \"shrinkwrap\" your app and you\n     have an installed dep that is optional, the dependency is no longer optional.  This might\n     not be what you want.\n\n  [npm shrinkwrap]: https://npmjs.org/doc/shrinkwrap.html\n\n*NOTE:* you can combine lockdown with shrinkwrap just fine.  If all you care about is #1 above.\n\nThe path forward is to build checksums into shrinkwrap and kick lockdown to the curb, but until\nthen, lockdown solves some problems.  (@izs is [interested in patches][]).\n\n  [interested in patches]: https://twitter.com/izs/status/234330784931143682\n\n**[npm-seal][]** - Solves the same problem as lockdown in a very different way.  Because seal\nis built to be used in concert with shrinkwrap, it suffers from the `optionalDependencies` issue\ndescribed above.\n\n  [npm-seal]: https://github.com/zaach/npm-seal\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mozilla/npm-lockdown/issues"
  },
  "_id": "lockdown@0.0.6",
  "dist": {
    "shasum": "cebddfb316927ba3c927ab278079963d31f6bec5"
  },
  "_from": "lockdown@0.0.6",
  "_resolved": "https://registry.npmjs.org/lockdown/-/lockdown-0.0.6.tgz"
}
