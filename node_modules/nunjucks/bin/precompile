#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var util = require('util');
var lib = require('../src/lib');
var compiler = require('../src/compiler');
var args = process.argv.slice();

var envOpts = 'null';
var force = false;

// Remove the "node precompile" arguments
args.shift();
args.shift();

// Process any flags
while(1) {
    if(args[0] == '-f') {
        force = true;
        args.shift();
    }
    else if(args[0] == '-p') {
        envOpts = args[1];
        args.shift();
        args.shift();
    }
    else {
        break;
    }
}

var inputPath = args[0];

if(args.length === 0) {
    console.log('Precompile nunjucks templates to javascript.\n\n' +
                'Usage: ' + path.basename(process.argv[1]) + 
                ' [-f] <path to file or directory>\n\n' +
                ' -f   Force compilation to continue on error\n\n' +
                ' if <path> is a file, outputs compiled javascript for\n' +
                ' that file only to stdout\n\n' +
                ' if <path> is a directory, recursively outputs template\n' +
                ' javascript and code for loading the templates at runtime\n' +
                ' for all files and subdirectories in that directory');
    process.exit(1);
}

try {
    var pathStats = fs.statSync(inputPath);
} catch (e) {
    console.log('Unable to stat ' + inputPath + ": " + e);
    process.exit(2);
}

if(pathStats.isFile()) {
    // Compile a single file and exit on first error found.
    // Note that you don't get an Environment object automatically
    // with this, so you will have to build your own scaffolding if you 
    // compile templates individually.
    try {
        var src = lib.withPrettyErrors(
            inputPath,
            false,
            function() {
                return compiler.compile(fs.readFileSync(inputPath,
                                                        'utf-8'));
            }
        );
    } catch (e) {
        console.error(e.toString());
        process.exit(4);
    }

    util.puts(src);
    process.exit(0);
}
else if(!pathStats.isDirectory()) {
    console.log(inputPath + ' is not a file or directory');
    process.exit(3);
}

var templates = [];

function addTemplates(dir) {
    var files = fs.readdirSync(dir);

    for(var i=0; i<files.length; i++) {
        var filepath = path.join(dir, files[i]);
        var stat = fs.statSync(filepath);

        if(stat && stat.isDirectory()) {
            addTemplates(filepath);
        }
        else if(path.extname(filepath) == '.html') {
            templates.push(filepath);
        }
    }
}

addTemplates(inputPath);

util.puts('(function() {');
util.puts('var templates = {};');

for(var i=0; i<templates.length; i++) {
    var doCompile = function() {
        var src = lib.withPrettyErrors(
            templates[i],
            false,
            function() {
                return compiler.compile(fs.readFileSync(templates[i],
                                                        'utf-8'));
            }
        );
        
        var name = templates[i].replace(path.join(inputPath, '/'), '');

        util.puts('templates["' + name + '"] = (function() {');
        util.puts(src);
        util.puts('})();');
    };

    // Don't stop generating the output if we're forcing compilation.
    if(force) {
        try {
            doCompile();
        } catch(e) {
            console.error(e);
        }
    }
    else {
        doCompile();
    }
}

util.puts(
    'if(typeof define === "function" && define.amd) {\n' +
    '    define(["nunjucks"], function(nunjucks) {\n' +
    '        nunjucks.env = new nunjucks.Environment([], ' + envOpts + ');\n' +
    '        nunjucks.env.registerPrecompiled(templates);\n' +
    '        return nunjucks;\n' +
    '    });\n' +
    '}\n' +
    'else if(typeof nunjucks === "object") {\n' +
    '    nunjucks.env = new nunjucks.Environment([], ' + envOpts + ');\n' +
    '    nunjucks.env.registerPrecompiled(templates);\n' +
    '}\n' +
    'else {\n' +
    '    console.error("ERROR: You must load nunjucks before the precompiled templates");\n' +
    '}\n' +
    '})();'
);
